name: Create Issue
description: Creates GitHub issues with custom title, body, labels, and assignees ‚Äî avoids duplicates.
author: owen-6936

branding:
  icon: alert-circle
  color: yellow

inputs:
  github-token:
    description: Token to authenticate the GitHub CLI
    required: true

  title:
    description: Title of the issue to create
    required: false
    default: ""

  body:
    description: Body content of the issue
    required: false
    default: ""

  labels:
    description: Comma-separated list of labels to apply
    required: false
    default: ""

  assignees:
    description: Comma-separated list of usernames to assign
    required: false
    default: ""

  fallback_title:
    description: Title to use if no title is provided
    required: false
    default: Automated Issue

  fallback_body:
    description: Body to use if no body is provided
    required: false
    default: No issue body was provided by the workflow.

outputs:
  issue-url:
    description: URL of the created or existing issue
    value: ${{ steps.create-issue.outputs.issue_url }}
  issue-number:
    description: Number of the created or existing issue
    value: ${{ steps.create-issue.outputs.issue_number }}

runs:
  using: composite
  steps:
    - name: Install GitHub CLI
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y gh jq

    - name: Authenticate GitHub CLI
      shell: bash
      run: |
        echo "${{ inputs.github-token }}" | gh auth login --with-token

    - name: Check for Duplicate Issue
      id: check-duplicate
      shell: bash
      run: |
        title="${{ inputs.title }}"
        [[ -z "$title" ]] && title="${{ inputs.fallback_title }}"

        echo "üîç Checking for existing open issues with title: $title"

        existing=$(gh issue list --repo "${GITHUB_REPOSITORY}" --state open --json title,number,url | jq -r \
          --arg t "$title" '.[] | select(.title == $t) | [.number, .url] | @tsv')

        if [[ -n "$existing" ]]; then
          issue_number=$(echo "$existing" | cut -f1)
          issue_url=$(echo "$existing" | cut -f2)
          echo "‚ö†Ô∏è Duplicate found: #$issue_number"

          echo "issue-url<<EOF" >> "$GITHUB_OUTPUT"
          echo "$issue_url" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "issue-number<<EOF" >> "$GITHUB_OUTPUT"
          echo "$issue_number" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          echo "IS_DUPLICATE=true" >> "$GITHUB_ENV"
          exit 0
        fi

        echo "‚úÖ No duplicate issue found, proceeding to create a new issue"
        echo "IS_DUPLICATE=false" >> "$GITHUB_ENV"

    - name: Ensure labels exist
      shell: bash
      if: ${{ env.IS_DUPLICATE == 'false' }}
      run: |
        raw="${{ inputs.labels }}"
        raw=$(echo "$raw" | sed 's/:/-/g' | sed 's/,,*/,/g' | sed 's/^,*//;s/,*$//')

        lower=$(echo "$raw" | tr '[:upper:]' '[:lower:]')

        if [[ -n "$raw" && "$lower" != *"created-by-ci"* ]]; then
        labels="created-by-ci,$raw"
        else
          labels="$raw"
        fi

        IFS=',' read -ra raw_labels <<< "$labels"
        declare -A seen_labels
        for lbl in "${raw_labels[@]}"; do
          seen_labels["$lbl"]=1
        done

        echo "deduplicated labels: ${!seen_labels[@]}"
        echo "github repository: ${GITHUB_REPOSITORY}"

        for lbl in "${!seen_labels[@]}"; do
          [[ -z "$lbl" ]] && continue
          exists=$(gh label list --repo "${GITHUB_REPOSITORY}" | grep -i -F -x "$lbl")
          if [[ -z "$exists" ]]; then
            echo "‚ûï Creating missing label: $lbl"
            gh label create "$lbl" --repo "${GITHUB_REPOSITORY}" --color "ededed" --description "Auto-created by CI"
          else
            echo "‚úÖ Label exists: $lbl"
          fi
        done

    - name: Create Issue
      id: create-issue
      if: ${{ env.IS_DUPLICATE == 'false' }}
      shell: bash
      run: |
        title="${{ inputs.title }}"
        body="${{ inputs.body }}"
        [[ -z "$title" ]] && title="${{ inputs.fallback_title }}"
        [[ -z "$body" ]]  && body="${{ inputs.fallback_body }}"

        echo "üöÄ Creating new issue: $title"

        cmd=(gh issue create --repo "${GITHUB_REPOSITORY}" --title "$title" --body "$body")

        cmd+=("--label" "created-by:ci")

        if [[ -n "${{ inputs.labels }}" ]]; then
          IFS=',' read -ra labels <<< "${{ inputs.labels }}"
          for lbl in "${labels[@]}"; do
            cmd+=("--label" "$lbl")
          done
        fi

        if [[ -n "${{ inputs.assignees }}" ]]; then
          IFS=',' read -ra assignees <<< "${{ inputs.assignees }}"
          for asn in "${assignees[@]}"; do
            cmd+=("--assignee" "$asn")
          done
        fi

        issue_output=$("${cmd[@]}")
        issue_url=$(echo "$issue_output" | grep -Eo 'https://github.com/[^ ]+/issues/[0-9]+')
        issue_number=$(echo "$issue_url" | grep -Eo '[0-9]+$')

        if [[ -z "$issue_url" ]]; then
          echo "‚ùå Failed to create issue or extract URL"
          exit 1
        fi

        echo "‚úÖ Created issue #$issue_number"

        echo "issue-url<<EOF" >> "$GITHUB_OUTPUT"
        echo "$issue_url" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        echo "issue-number<<EOF" >> "$GITHUB_OUTPUT"
        echo "$issue_number" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
